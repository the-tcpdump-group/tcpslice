#  Copyright (c) 1993, 1994, 1995, 1996, 1997, 1999, 2000
#	The Regents of the University of California.  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that: (1) source code distributions
#  retain the above copyright notice and this paragraph in its entirety, (2)
#  distributions including binary code include the above copyright notice and
#  this paragraph in its entirety in the documentation or other materials
#  provided with the distribution, and (3) all advertising materials mentioning
#  features or use of this software display the following acknowledgement:
#  ``This product includes software developed by the University of California,
#  Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
#  the University nor the names of its contributors may be used to endorse
#  or promote products derived from this software without specific prior
#  written permission.
#  THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

#
# Various configurable paths (remember to edit Makefile.in, not Makefile)
#

# Top level hierarchy
prefix = @prefix@
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@
# Pathname of directory to install the binary
bindir = @bindir@
# Pathname of directory to install the man page
mandir = @mandir@

# VPATH
srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@

#
# You shouldn't need to edit anything below here.
#

CC = @CC@
MKDEP = @MKDEP@
PROG = tcpslice
CCOPT = @V_CCOPT@
INCLS = -I. @V_INCLS@
DEFS = @DEFS@ @CPPFLAGS@ @V_DEFS@

# Standard CFLAGS
CFLAGS = @CFLAGS@
FULL_CFLAGS = $(CCOPT) $(DEFS) $(INCLS) $(CFLAGS)

# Standard LDFLAGS
LDFLAGS = @LDFLAGS@

# Standard LIBS
LIBS = @LIBS@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

DEPENDENCY_CFLAG = @DEPENDENCY_CFLAG@

# Explicitly define compilation rule since SunOS 4's make doesn't like gcc.
# Also, gcc does not remove the .o before forking 'as', which can be a
# problem if you don't own the file but can write to the directory.
.c.o:
	@rm -f $@
	$(CC) $(FULL_CFLAGS) -c $(srcdir)/$*.c

CSRC =	tcpslice.c gmt2local.c gwtm2secs.c machdep.c search.c \
	seek-tell.c sessions.c util.c
GENSRC = version.c
LOCALSRC = @LOCALSRC@
LIBOBJS = @LIBOBJS@

SRC =	$(CSRC) $(GENSRC)

# We would like to say "OBJ = $(SRC:.c=.o)" but Ultrix's make cannot
# hack the extra indirection
OBJ =	$(CSRC:.c=.o) $(GENSRC:.c=.o) $(LOCALSRC:.c=.o) $(LIBOBJS)
HDR = \
	compiler-tests.h \
	diag-control.h \
	gmt2local.h \
	machdep.h \
	sessions.h \
	tcpslice.h \
	varattrs.h

TAGHDR = \
	/usr/include/netinet/in.h \
	/usr/include/netinet/udp.h \
	/usr/include/netinet/tcp.h \
	/usr/include/netinet/if_ether.h \
	/usr/include/arpa/tftp.h

TAGFILES = $(SRC) $(HDR) $(TAGHDR)

CLEANFILES = $(PROG) $(OBJ) $(GENSRC)

EXTRA_DIST = \
	CHANGES \
	CREDITS \
	INSTALL.md \
	Makefile.in \
	Makefile-devel-adds \
	README.md \
	VERSION \
	aclocal.m4 \
	autogen.sh \
	config.guess \
	config.sub \
	configure.ac \
	install-sh \
	instrument-functions.c \
	lbl/os-solaris2.h \
	lbl/os-sunos4.h \
	missing/strlcpy.c \
	mkdep \
	tcpslice.1

RELEASE_FILES = $(CSRC) $(HDR) $(EXTRA_DIST)

all: $(PROG)

$(PROG): $(OBJ) @V_PCAPDEP@
	@rm -f $@
	$(CC) $(FULL_CFLAGS) $(LDFLAGS) -o $@ $(OBJ) $(LIBS)

instrument_all: $(PROG)
	@rm -f instrument_functions_global.devel
	@rm -f instrument_functions_off.devel

instrument_global: $(PROG)
	@touch instrument_functions_global.devel
	@rm -f instrument_functions_off.devel

instrument_off: $(PROG)
	@touch instrument_functions_off.devel
	@rm -f instrument_functions_global.devel

version.o: version.c
	$(CC) $(FULL_CFLAGS) -c version.c

version.c: $(srcdir)/VERSION
	@rm -f $@
	sed -e 's/.*/char version[] = "&";/' $(srcdir)/VERSION > $@

strlcpy.o: $(srcdir)/missing/strlcpy.c
	$(CC) $(FULL_CFLAGS) -o $@ -c $(srcdir)/missing/strlcpy.c

install: all
	[ -d "$(DESTDIR)$(bindir)" ] || \
	    (mkdir -p "$(DESTDIR)$(bindir)"; chmod 755 "$(DESTDIR)$(bindir)")
	$(INSTALL_PROGRAM) $(PROG) "$(DESTDIR)$(bindir)/$(PROG)"
	[ -d "$(DESTDIR)$(mandir)/man1" ] || \
	    (mkdir -p "$(DESTDIR)$(mandir)/man1"; chmod 755 "$(DESTDIR)$(mandir)/man1")
	$(INSTALL_DATA) $(srcdir)/$(PROG).1 "$(DESTDIR)$(mandir)/man1/$(PROG).1"

uninstall:
	rm -f "$(DESTDIR)$(bindir)/$(PROG)"
	rm -f "$(DESTDIR)$(mandir)/man1/$(PROG).1"

lint: $(GENSRC)
	lint -hbxn $(SRC) | \
	    grep -v 'struct/union .* never defined' | \
	    grep -v 'possible pointer alignment problem'

clean:
	rm -f $(CLEANFILES) $(PROG)-`cat VERSION`.tar*

distclean:
	rm -f $(CLEANFILES) Makefile config.cache config.log config.status \
	    config.h config.h.in config.h.in~ configure configure~ configure.ac~ \
	    os-proto.h stamp-h stamp-h.in
	rm -rf autom4te.cache

extags: $(TAGFILES)
	ctags $(TAGFILES)

tags: $(TAGFILES)
	ctags -wtd $(TAGFILES)

TAGS: $(TAGFILES)
	etags $(TAGFILES)

#
# Use git archive piped to tar to construct a subdirectory whose name
# is tcpslice-{release}, containing all the checked-in source files,
# and then run autoreconf in that directory to generate the configure
# script and other files from that source.  Then remove autom4te.cache,
# construct the release tarball from that subdirectory, and remove
# the subdirectory.
#
# The  --format=tar is to force git archive to write a non-compressed
# archive, in case the platform's tar command doesn't have built-in
# decompression.
#
# The ^{tree} is there to force git archive not to write out the
# "helpful" global extended pax header with a commit ID, as not all
# versions of tar can handle that (Solaris tar can't, for example).
# (It turns HEAD, or a tag, both of which are apparently "tree-ish"es,
# into a tree; apparently, unlike HEAD, or a tag, which have a commit
# ID associated with them, the tree associated with them doesn't have
# a commit ID, so no commit ID is available to write, and thus
# git archive doesn't write one.)
#
releasetar:
	@TAG=$(PROG)-`cat VERSION` && \
	AUTORECONF_DIR=/tmp/autoreconf_"$$TAG"_$$$$ && \
	DIR=`pwd` && \
	cd /tmp && \
	rm -rf "$$AUTORECONF_DIR" && \
	mkdir "$$AUTORECONF_DIR" && \
	cd "$$AUTORECONF_DIR" && \
	if git -C "$$DIR" show-ref --tags --quiet --verify -- "refs/tags/$$TAG"; then \
	    (git -C "$$DIR" archive --format=tar --prefix="$$TAG"/ "$$TAG^{tree}" $(RELEASE_FILES) | \
	     tar xf -) && \
	    echo "Archive build from tag $$TAG."; \
	else \
	    (git -C "$$DIR" archive --format=tar --prefix="$$TAG"/ "HEAD^{tree}" $(RELEASE_FILES) | tar xf -) && \
	    echo "No $$TAG tag. Archive build from HEAD."; \
	fi && \
	(cd "$$TAG" && $${AUTORECONF:-autoreconf} && rm -rf autom4te.cache) && \
	tar cf "$$DIR/$$TAG".tar "$$TAG" && \
	rm -f "$$DIR/$$TAG".tar.gz && \
	gzip "$$DIR/$$TAG".tar && \
	rm -rf "/tmp/$$AUTORECONF_DIR"

releasecheck: releasetar
	@TAG=$(PROG)-`cat VERSION` && \
	INSTALL_DIR=/tmp/install_"$$TAG"_$$$$ && \
	DIR=`pwd` && \
	cd /tmp && \
	rm -rf "$$TAG" && \
	rm -rf "$$INSTALL_DIR" && \
	tar xf "$$DIR"/"$$TAG".tar.gz && \
	cd "$$TAG" && \
	echo "[$@] $$ touch .devel" && \
	touch .devel && \
	echo "[$@] $$ ./configure --quiet --prefix=$$INSTALL_DIR" && \
	./configure --quiet --prefix="$$INSTALL_DIR" && \
	echo '[$@] $$ make -s' && \
	make -s && \
	echo '[$@] $$ make -s install' && \
	make -s install && \
	cd .. && \
	rm -rf "$$TAG" && \
	rm -rf "$$INSTALL_DIR" && \
	echo '[$@] Done.'

whitespacecheck:
	@# trailing space(s)?
	@if git grep -I -n ' $$' $$(git ls-files|grep -v '^tests/'); then \
	    echo 'Error: Trailing space(s).'; \
	    exit 1; \
	fi
	@# trailing tab(s)?
	@# install-sh has a tab at the end of one line
	@if git grep -I -n '	$$' $$(git ls-files|grep -vE '^(tests/|install-sh$$)'); then \
	    echo 'Error: Trailing tabs(s).'; \
	    exit 1; \
	fi

depend: $(GENSRC)
	$(MKDEP) -c "$(CC)" -m "$(DEPENDENCY_CFLAG)" -s "$(srcdir)" $(DEFS) $(INCLS) $(SRC) $(LIBNETDISSECT_SRC)

shellcheck:
	shellcheck -f gcc -e SC2006 build.sh build_matrix.sh build_common.sh .ci-coverity-scan-build.sh
